{"$message_type":"diagnostic","message":"the function or associated item `new_from_slices` exists for struct `Cbc<Aes128, Pkcs7>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":2353,"byte_end":2368,"line_start":95,"line_end":95,"column_start":33,"column_end":48,"is_primary":true,"text":[{"text":"        let cipher = Aes128Cbc::new_from_slices(&key, &iv)","highlight_start":33,"highlight_end":48}],"label":"function or associated item cannot be called on `Cbc<Aes128, Pkcs7>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.4/src/autodetect.rs","byte_start":1498,"byte_end":1607,"line_start":52,"line_end":55,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        pub struct $name {","highlight_start":9,"highlight_end":27},{"text":"            inner: $module::Inner,","highlight_start":1,"highlight_end":35},{"text":"            token: aes_intrinsics::InitToken,","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"doesn't satisfy `Aes128: block_modes::cipher::BlockCipher`, `Aes128: block_modes::cipher::BlockDecrypt` or `Aes128: block_modes::cipher::BlockEncrypt`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.4/src/autodetect.rs","byte_start":13546,"byte_end":13616,"line_start":428,"line_end":428,"column_start":1,"column_end":71,"is_primary":false,"text":[{"text":"define_aes_impl!(Aes128, Aes128Enc, Aes128Dec, aes128, U16, \"AES-128\");","highlight_start":1,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_aes_impl!","def_site_span":{"file_name":"/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.4/src/autodetect.rs","byte_start":562,"byte_end":590,"line_start":21,"line_end":21,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! define_aes_impl {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/block-modes-0.8.1/src/cbc.rs","byte_start":437,"byte_end":509,"line_start":12,"line_end":12,"column_start":1,"column_end":73,"is_primary":false,"text":[{"text":"pub struct Cbc<C: BlockCipher + BlockEncrypt + BlockDecrypt, P: Padding> {","highlight_start":1,"highlight_end":73}],"label":"doesn't satisfy `Cbc<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`Aes128: block_modes::cipher::BlockCipher`\nwhich is required by `Cbc<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`\n`Aes128: block_modes::cipher::BlockEncrypt`\nwhich is required by `Cbc<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`\n`Aes128: block_modes::cipher::BlockDecrypt`\nwhich is required by `Cbc<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the function or associated item `new_from_slices` exists for struct `Cbc<Aes128, Pkcs7>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:95:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let cipher = Aes128Cbc::new_from_slices(&key, &iv)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item cannot be called on `Cbc<Aes128, Pkcs7>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.4/src/autodetect.rs:428:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m428\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_aes_impl!(Aes128, Aes128Enc, Aes128Dec, aes128, U16, \"AES-128\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `Aes128: block_modes::cipher::BlockCipher`, `Aes128: block_modes::cipher::BlockDecrypt` or `Aes128: block_modes::cipher::BlockEncrypt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/block-modes-0.8.1/src/cbc.rs:12:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cbc<C: BlockCipher + BlockEncrypt + BlockDecrypt, P: Padding> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `Cbc<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `Aes128: block_modes::cipher::BlockCipher`\u001b[0m\n\u001b[0m            which is required by `Cbc<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`\u001b[0m\n\u001b[0m            `Aes128: block_modes::cipher::BlockEncrypt`\u001b[0m\n\u001b[0m            which is required by `Cbc<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`\u001b[0m\n\u001b[0m            `Aes128: block_modes::cipher::BlockDecrypt`\u001b[0m\n\u001b[0m            which is required by `Cbc<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Aes128: block_modes::cipher::BlockEncrypt` is not satisfied because the trait comes from a different crate version","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":2342,"byte_end":2351,"line_start":95,"line_end":95,"column_start":22,"column_end":31,"is_primary":true,"text":[{"text":"        let cipher = Aes128Cbc::new_from_slices(&key, &iv)","highlight_start":22,"highlight_end":31}],"label":"the trait `block_modes::cipher::BlockEncrypt` is not implemented for `Aes128`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there are multiple different versions of crate `cipher` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cipher-0.3.0/src/block.rs","byte_start":2104,"byte_end":2139,"line_start":57,"line_end":57,"column_start":1,"column_end":36,"is_primary":true,"text":[{"text":"pub trait BlockEncrypt: BlockCipher {","highlight_start":1,"highlight_end":36}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":66,"byte_end":77,"line_start":3,"line_end":3,"column_start":5,"column_end":16,"is_primary":false,"text":[{"text":"use block_modes::{BlockMode, Cbc};","highlight_start":5,"highlight_end":16}],"label":"one version of crate `cipher` is used here, as a dependency of crate `block_modes`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":49,"byte_end":52,"line_start":2,"line_end":2,"column_start":5,"column_end":8,"is_primary":false,"text":[{"text":"use aes::Aes128;","highlight_start":5,"highlight_end":8}],"label":"one version of crate `cipher` is used here, as a dependency of crate `aes`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.4/src/autodetect.rs","byte_start":1498,"byte_end":1607,"line_start":52,"line_end":55,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        pub struct $name {","highlight_start":9,"highlight_end":27},{"text":"            inner: $module::Inner,","highlight_start":1,"highlight_end":35},{"text":"            token: aes_intrinsics::InitToken,","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.4/src/autodetect.rs","byte_start":13546,"byte_end":13616,"line_start":428,"line_end":428,"column_start":1,"column_end":71,"is_primary":false,"text":[{"text":"define_aes_impl!(Aes128, Aes128Enc, Aes128Dec, aes128, U16, \"AES-128\");","highlight_start":1,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_aes_impl!","def_site_span":{"file_name":"/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.4/src/autodetect.rs","byte_start":562,"byte_end":590,"line_start":21,"line_end":21,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! define_aes_impl {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cipher-0.4.4/src/block.rs","byte_start":993,"byte_end":1029,"line_start":26,"line_end":26,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"pub trait BlockCipher: BlockSizeUser {}","highlight_start":1,"highlight_end":37}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Aes128: block_modes::cipher::BlockEncrypt` is not satisfied because the trait comes from a different crate version\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:95:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let cipher = Aes128Cbc::new_from_slices(&key, &iv)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `block_modes::cipher::BlockEncrypt` is not implemented for `Aes128`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcipher\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cipher-0.3.0/src/block.rs:57:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BlockEncrypt: BlockCipher {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:2:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse aes::Aes128;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `cipher` is used here, as a dependency of crate `aes`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse block_modes::{BlockMode, Cbc};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `cipher` is used here, as a dependency of crate `block_modes`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.4/src/autodetect.rs:428:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m428\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_aes_impl!(Aes128, Aes128Enc, Aes128Dec, aes128, U16, \"AES-128\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cipher-0.4.4/src/block.rs:26:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BlockCipher: BlockSizeUser {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Aes128: block_modes::cipher::BlockDecrypt` is not satisfied because the trait comes from a different crate version","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":2342,"byte_end":2351,"line_start":95,"line_end":95,"column_start":22,"column_end":31,"is_primary":true,"text":[{"text":"        let cipher = Aes128Cbc::new_from_slices(&key, &iv)","highlight_start":22,"highlight_end":31}],"label":"the trait `block_modes::cipher::BlockDecrypt` is not implemented for `Aes128`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there are multiple different versions of crate `cipher` in the dependency graph\n","code":null,"level":"note","spans":[{"file_name":"/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cipher-0.3.0/src/block.rs","byte_start":3170,"byte_end":3205,"line_start":94,"line_end":94,"column_start":1,"column_end":36,"is_primary":true,"text":[{"text":"pub trait BlockDecrypt: BlockCipher {","highlight_start":1,"highlight_end":36}],"label":"this is the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":66,"byte_end":77,"line_start":3,"line_end":3,"column_start":5,"column_end":16,"is_primary":false,"text":[{"text":"use block_modes::{BlockMode, Cbc};","highlight_start":5,"highlight_end":16}],"label":"one version of crate `cipher` is used here, as a dependency of crate `block_modes`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":49,"byte_end":52,"line_start":2,"line_end":2,"column_start":5,"column_end":8,"is_primary":false,"text":[{"text":"use aes::Aes128;","highlight_start":5,"highlight_end":8}],"label":"one version of crate `cipher` is used here, as a dependency of crate `aes`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.4/src/autodetect.rs","byte_start":1498,"byte_end":1607,"line_start":52,"line_end":55,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        pub struct $name {","highlight_start":9,"highlight_end":27},{"text":"            inner: $module::Inner,","highlight_start":1,"highlight_end":35},{"text":"            token: aes_intrinsics::InitToken,","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"this type doesn't implement the required trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.4/src/autodetect.rs","byte_start":13546,"byte_end":13616,"line_start":428,"line_end":428,"column_start":1,"column_end":71,"is_primary":false,"text":[{"text":"define_aes_impl!(Aes128, Aes128Enc, Aes128Dec, aes128, U16, \"AES-128\");","highlight_start":1,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_aes_impl!","def_site_span":{"file_name":"/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.4/src/autodetect.rs","byte_start":562,"byte_end":590,"line_start":21,"line_end":21,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! define_aes_impl {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cipher-0.4.4/src/block.rs","byte_start":993,"byte_end":1029,"line_start":26,"line_end":26,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"pub trait BlockCipher: BlockSizeUser {}","highlight_start":1,"highlight_end":37}],"label":"this is the found trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can use `cargo tree` to explore your dependency tree","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Aes128: block_modes::cipher::BlockDecrypt` is not satisfied because the trait comes from a different crate version\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:95:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let cipher = Aes128Cbc::new_from_slices(&key, &iv)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `block_modes::cipher::BlockDecrypt` is not implemented for `Aes128`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: there are \u001b[0m\u001b[0m\u001b[1m\u001b[35mmultiple different versions\u001b[0m\u001b[0m of crate `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcipher\u001b[0m\u001b[0m` in the dependency graph\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cipher-0.3.0/src/block.rs:94:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BlockDecrypt: BlockCipher {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis is the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/main.rs:2:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse aes::Aes128;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `cipher` is used here, as a dependency of crate `aes`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse block_modes::{BlockMode, Cbc};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone version of crate `cipher` is used here, as a dependency of crate `block_modes`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.4/src/autodetect.rs:428:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m428\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_aes_impl!(Aes128, Aes128Enc, Aes128Dec, aes128, U16, \"AES-128\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis type doesn't implement the required trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/kandarp/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cipher-0.4.4/src/block.rs:26:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BlockCipher: BlockSizeUser {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is the found trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: you can use `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcargo tree\u001b[0m\u001b[0m` to explore your dependency tree\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
